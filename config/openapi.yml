openapi: 3.0.0
info:
  title: Simple User Management API
  description: Backend API example
  termsOfService: http://swagger.io/terms/
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 1.0.0

servers:
  - url: /api/v1
    description: SwaggerHub API Auto Mocking

tags:
  - name: admins
    description: Secured Admin-only calls
  - name: users
    description: Operations available to regular users

paths:
  /register:
    post:
      tags:
        - users
      summary: Register a user to the system
      description: Register a user to the system
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: username
                email:
                  type: string
                  example: user@email.com
                password:
                  type: string
                  example: password
      responses:
        "200":
          description: User registry
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200"
        "400":
          description: Bad request, invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailResponse"
        "409":
          description: Existing user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailResponse"
      x-swagger-router-controller: Users

  /update:
    patch:
      tags:
        - users
      summary: Update user information
      description: Updates user information
      operationId: update
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@email.com
                password:
                  type: string
                  example: password
                active:
                  type: boolean
      responses:
        "200":
          description: User's updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_200"
        "401":
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailResponse"
        "404":
          description: User's not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailResponse"
      x-swagger-router-controller: Users

  /login:
    post:
      tags:
        - users
      summary: Log in to the system
      description: Log in to the system
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
      responses:
        "200":
          description: Success
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              required: true
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - userId
                properties:
                  userId:
                    type: string
                  token:
                    type: string
                    format: '^[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*$'
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailResponse"
        "404":
          description: Invalid user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailResponse"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailResponse"
      x-swagger-router-controller: Users

  /users:
    get:
      tags:
        - admins
      summary: Returns users
      description: Get the details of a user or users
      operationId: getUsers
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: query
          description: The username of the user to return
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: email
          in: query
          description: The email of the user to return
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: admin
          in: query
          description: Is admin
          required: false
          style: form
          explode: true
          schema:
            type: boolean
        - name: active
          in: query
          description: Active
          required: false
          style: form
          explode: true
          schema:
            type: boolean
      responses:
        "200":
          description: Search result
          content:
            application/json:
              schema:
                type: object
                example: [
                  { username: user,
                    email: user@email.com,
                    admin: false,
                    active: true},
                  { username: admin,
                    email: admin@email.com,
                    admin: true,
                    active: true}
                ]
        "401":
          description: Unauthorized request
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Admins

  /me:
    get:
      tags:
        - users
      summary: Get user's profile
      description: Get the details of the current user
      operationId: whoAmI
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                type: object
                example:
                  username: user,
                  email: user@email.com,
                  admin: false,
                  active: true
                  created: 1695494609813
        "401":
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailResponse"
        "404":
          description: User's not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailResponse"
        "500":
          description: Internal Server Error
      x-swagger-router-controller: Admins

  /logout:
    get:
      tags:
        - users
      summary: Logs out of the system
      description: Logs out of the system and clear cookies
      operationId: logoutUser
      responses:
        "200":
          description: Logged out of the system
      x-swagger-router-controller: Admins

  /delete:
    delete:
      tags:
        - admins
      summary: Deletes a user from the system
      description: Deletes a user from the system
      operationId: deleteUser
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: query
          description: The username of the user to return
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: User's deleted
        "401":
          description: Unauthorized request
        "404":
          description: User's not found
      x-swagger-router-controller: Admins

  /api-docs:
    get:
      tags:
        - users
      summary: API Documentation
      responses:
        "200":
          description: success

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      required:
        - email
        - password
        - username
      type: object
      properties:
        username:
          type: string
          example: username
        email:
          type: string
          example: user@email.com
        password:
          type: string
          example: password
        admin:
          type: boolean
        active:
          type: boolean
        created:
          type: number
      example:
        username: username
        email: user@email.com
        password: password
        admin: false
    UserLogin:
      required:
        - username
        - password
      type: object
      properties:
        username:
          type: string
          example: username
        password:
          type: string
          example: password
    inline_response_200:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/inline_response_200_user"
      example:
        user:
          admin: true
          email: email
          username: username
    inline_response_200_user:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        admin:
          type: boolean
      example:
        admin: true
        email: email
        username: username
    FailResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            type:
              type: string
            message:
              type: string
            errors:
              type: object
